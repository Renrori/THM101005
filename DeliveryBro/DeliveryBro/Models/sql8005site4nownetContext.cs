// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DeliveryBro.Models
{
    public partial class sql8005site4nownetContext : DbContext
    {
        public sql8005site4nownetContext()
        {
        }

        public sql8005site4nownetContext(DbContextOptions<sql8005site4nownetContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AdministerTable> AdministerTable { get; set; }
        public virtual DbSet<CouponTable> CouponTable { get; set; }
        public virtual DbSet<CustomerAddressTable> CustomerAddressTable { get; set; }
        public virtual DbSet<CustomerOrderTable> CustomerOrderTable { get; set; }
        public virtual DbSet<CustomersTable> CustomersTable { get; set; }
        public virtual DbSet<DriverTable> DriverTable { get; set; }
        public virtual DbSet<MenuTable> MenuTable { get; set; }
        public virtual DbSet<OrderDetailsTable> OrderDetailsTable { get; set; }
        public virtual DbSet<RestaurantTable> RestaurantTable { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AdministerTable>(entity =>
            {
                entity.HasKey(e => e.AdministerId);

                entity.ToTable("Administer_Table");

                entity.Property(e => e.AdministerId)
                    .ValueGeneratedNever()
                    .HasColumnName("AdministerID");

                entity.Property(e => e.AdministerAccount)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.AdministerPassword)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CouponTable>(entity =>
            {
                entity.HasKey(e => e.CouponId);

                entity.ToTable("Coupon_Table");

                entity.Property(e => e.CouponId).HasColumnName("CouponID");

                entity.Property(e => e.CouponDesription).HasMaxLength(50);

                entity.Property(e => e.CouponLimit).HasMaxLength(50);

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CouponPicture).HasColumnType("image");
            });

            modelBuilder.Entity<CustomerAddressTable>(entity =>
            {
                entity.HasKey(e => e.CustomerAddressId);

                entity.ToTable("CustomerAddress_Table");

                entity.HasIndex(e => e.CustomerAddressId, "IX_CustomerAddress_Table");

                entity.Property(e => e.CustomerAddressId).HasColumnName("CustomerAddressID");

                entity.Property(e => e.CustomerAddress)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerAddressTable)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerAddress_Table_Customers_Table");
            });

            modelBuilder.Entity<CustomerOrderTable>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.ToTable("CustomerOrder_Table");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.CouponId).HasColumnName("CouponID");

                entity.Property(e => e.CustomerAddress).HasMaxLength(50);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DriverId).HasColumnName("DriverID");

                entity.Property(e => e.Note)
                    .HasMaxLength(50)
                    .HasColumnName("note");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Payment)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.RestaurantId).HasColumnName("RestaurantID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerOrderTable)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerOrder_Table_Customers_Table");

                entity.HasOne(d => d.Restaurant)
                    .WithMany(p => p.CustomerOrderTable)
                    .HasForeignKey(d => d.RestaurantId)
                    .HasConstraintName("FK_CustomerOrder_Table_Restaurant_Table");
            });

            modelBuilder.Entity<CustomersTable>(entity =>
            {
                entity.HasKey(e => e.CustomerId);

                entity.ToTable("Customers_Table");

                entity.Property(e => e.CustomerId)
                    .ValueGeneratedNever()
                    .HasColumnName("CustomerID");

                entity.Property(e => e.CouponId).HasColumnName("CouponID");

                entity.Property(e => e.CustomerAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerEmail).HasMaxLength(50);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.CustomerOauth)
                    .HasMaxLength(10)
                    .HasColumnName("CustomerOAuth")
                    .IsFixedLength();

                entity.Property(e => e.CustomerPassword)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CustomerPhone).HasMaxLength(12);

                entity.Property(e => e.CustomerPhoto).HasColumnType("image");

                entity.Property(e => e.DateOfBirth).HasColumnType("date");
            });

            modelBuilder.Entity<DriverTable>(entity =>
            {
                entity.HasKey(e => e.DriverId);

                entity.ToTable("Driver_Table");

                entity.Property(e => e.DriverId)
                    .ValueGeneratedNever()
                    .HasColumnName("DriverID");

                entity.Property(e => e.DriverAccount)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DriverEmail)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DriverName)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.DriverPassword)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DriverPhone).HasMaxLength(14);

                entity.Property(e => e.DriverPicture).HasColumnType("image");
            });

            modelBuilder.Entity<MenuTable>(entity =>
            {
                entity.HasKey(e => e.DishId);

                entity.ToTable("Menu_Table");

                entity.Property(e => e.DishId).HasColumnName("DishID");

                entity.Property(e => e.CategoryCustomSettingsId).HasColumnName("CategoryCustomSettingsID");

                entity.Property(e => e.DishCategory)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.DishDescription).HasMaxLength(60);

                entity.Property(e => e.DishName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DishStatus)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.RestaurantId).HasColumnName("RestaurantID");

                entity.HasOne(d => d.Restaurant)
                    .WithMany(p => p.MenuTable)
                    .HasForeignKey(d => d.RestaurantId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Menu_Table_Restaurant_Table");
            });

            modelBuilder.Entity<OrderDetailsTable>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.DishId });

                entity.ToTable("OrderDetails_Table");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.DishId).HasColumnName("DishID");

                entity.Property(e => e.DishName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderDate).HasColumnType("date");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetailsTable)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Table_CustomerOrder_Table");
            });

            modelBuilder.Entity<RestaurantTable>(entity =>
            {
                entity.HasKey(e => e.RestaurantId);

                entity.ToTable("Restaurant_Table");

                entity.Property(e => e.RestaurantId)
                    .ValueGeneratedNever()
                    .HasColumnName("RestaurantID");

                entity.Property(e => e.EndHours).HasColumnType("time(0)");

                entity.Property(e => e.Latitude).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.OpeningHours).HasColumnType("time(0)");

                entity.Property(e => e.RestaurantAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RestaurantAddress).HasMaxLength(50);

                entity.Property(e => e.RestaurantDescription).HasMaxLength(50);

                entity.Property(e => e.RestaurantEmail).HasMaxLength(50);

                entity.Property(e => e.RestaurantName).HasMaxLength(20);

                entity.Property(e => e.RestaurantPassword)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.RestaurantPhone).HasMaxLength(12);

                entity.Property(e => e.RestaurantPicture).HasColumnType("image");

                entity.Property(e => e.RestaurantStatus).HasMaxLength(10);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}