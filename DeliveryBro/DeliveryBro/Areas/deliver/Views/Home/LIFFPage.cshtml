@{
	Layout = null;
}
<!DOCTYPE html>
<html>

<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Real-time Map</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
		  integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
	<style>
		html,
		body {
			height: 100vh;
			margin: 0;
			padding: 0;
			position: relative;
		}

		.navbar {
			position: fixed;
			bottom: 0;
			width: 100%;
			z-index: 9999;
			overflow-x: auto;
			overflow-y: hidden;
		}

		.navbar-nav {
			white-space: nowrap;
		}

		#map {
			position: fixed;
			height: 100vh;
		}

		.dropdown-menu {
			max-height: 70vh;
			overflow-y: auto;
		}
	</style>

</head>

<body>
	<div id="app">
		<div id="map"></div>
		<nav class="fixed-bottom navbar navbar-expand-sm navbar-dark bg-dark">
			<div class="container-fluid">
				<a class="navbar-brand" href="#">DeliveryBro</a>
				<button class="btn btn-success" @@click="logout">上線</button>
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse"
						data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
						aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<div class="collapse navbar-collapse" id="navbarSupportedContent">
					<template v-if="isOrderPanelOpen">
						<ul class="navbar-nav me-auto mb-2 mb-lg-0">
							<li class="nav-item dropdown" @@click="otherPanel">
								<a class="nav-link dropdown-toggle" href="#" id="order" role="button"
								   data-bs-toggle="dropdown" aria-expanded="false">
									等待派送訂單
								</a>
								<ul class="dropdown-menu" aria-labelledby="navbarDropdown" >
									<template v-for="item in orders">
										<li @@click.stop="orderDetail(item)"
											class="my-1 dropdown-item d-flex justify-content-between align-items-start">
											<div class="ms-1 me-auto ">
												<div class="fw-bold">{{item.restaurantAddress}}</div>
												<div>餐廳:{{item.restaurantName}} </div>
												<div>{{item.orderDate}}</div>
												<div> 訂購者: {{item.customerName}}</div>
											</div>
											<div class="text-end">
												<div>
													<span class="badge bg-dark rounded-pill">{{(item.randCdistance*1).toFixed(2)}}KM</span>
												</div>
												<div>
													<span class="badge bg-info">現金</span>
												</div>
											</div>
										<li>
											<hr class="dropdown-divider">
										</li>
									</template>
								</ul>
							</li>
							<li class="nav-item dropdown" @@click="otherPanel">
								<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
								   data-bs-toggle="dropdown" aria-expanded="false">
									派送中訂單
								</a>
								<ul class="dropdown-menu" aria-labelledby="navbarDropdown" >
									<template v-for="item in acceptedOrder">
										<li @@click.stop="orderDetail(item)"
											class="my-1 dropdown-item d-flex justify-content-between align-items-start">
											<div class="ms-1 me-auto ">
												<div class="fw-bold">{{item.restaurantAddress}}</div>
												<div>餐廳:{{item.restaurantName}} </div>
												<div>{{item.orderDate}}</div>
												<div> 訂購者: {{item.customerName}}</div>
											</div>
											<div class="text-end">
												<div>
													<span class="badge bg-dark rounded-pill">{{(item.randCdistance*1).toFixed(2)}}KM</span>
												</div>
												<div>
													<span class="badge bg-info">現金</span>
												</div>
											</div>
										<li>
											<hr class="dropdown-divider">
										</li>
									</template>
								</ul>
							</li>
							<li class="nav-item dropdown" @@click="historyPanel">
								<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
								   data-bs-toggle="dropdown" aria-expanded="false" >
									歷史訂單
								</a>
								<ul class="dropdown-menu " aria-labelledby="navbarDropdown">
									<template v-for="item in hisorders">
										<li @@click.stop="orderDetail(item)"
											class="my-1 dropdown-item d-flex justify-content-between align-items-start">
											<div class="ms-1 me-auto ">
												<div>餐廳:{{item.restaurantName}} </div>
												<div>{{item.orderDate}}</div>
												<div> 訂購者: {{item.customerName}}</div>
											</div>
											<div class="text-end">
												<div>
													<span class="badge bg-info">現金</span>
												</div>
											</div>
										<li>
											<hr class="dropdown-divider">
										</li>
									</template>
								</ul>
							</li>
						</ul>
					</template>

					<template v-else>
						<div class="card my-3">
							<div class="card-body my-4">
								<i @@click="closeOrderPanel" class="bi bi-x-square-fill "
								   style="font-size: 2rem; position: absolute; top: 2vh; right: 4vh;"></i>
								<h5 class="card-title">訂單編號: {{order.orderId}}</h5>
								<h5>完成時間: {{order.orderDate}}</h5>
								<h5>顧客名稱: {{order.customerName}}</h5>
								<h5>顧客地址: {{order.customerAddress}}</h5>
								<hr />
								<div class="row">
									<div class="col-12">
										<div class="row" v-for="detail in order.orderDetails">
											<div class="col-5">{{detail.dishName}}</div>
											<div class="col-3">${{detail.unitPrice}}</div>
											<div class="col-1">{{detail.quantity}}</div>
											<div class="col-3">${{detail.unitPrice*detail.quantity}}</div>
										</div>
									</div>
								</div>
								<hr />
								<div class="row">
									<div class="col">
										<h5>備註:</h5>
										<div>{{order.note}}</div>
									</div>
								</div>
								<hr>
								<div class="row">
									<div class="col">
										<div>Total: ${{order.total}}</div>
									</div>
								</div>
								<hr>
								<div class="row">
									<template v-if="isAcceptOrder&&!isHisPanel">
										<div class="col">
											<button :disabled="btnValid(order.orderId)" @@click="finishOrder(order.orderId)" class="btn btn-success w-100">完成訂單</button>
										</div>
									</template>
									<template v-else-if="isHisPanel">
										<div class="col">
											<button class="btn btn-success w-100">已完成</button>
										</div>
									</template>
									<template v-else>
										<div class="col">
											<button @@click="acceptOrder(order)" class="btn btn-success w-100">接單</button>
										</div>
										<div class="col">
											<button @@click="closeOrderPanel" class="btn btn-danger w-100">取消</button>
										</div>
									</template>
								</div>
							</div>
						</div>
					</template>
					<form class="d-flex">
						<input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
						<button class="btn btn-outline-success" type="submit">Search</button>
					</form>
				</div>
			</div>
		</nav>

	</div>

</body>

</html>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDSVv7tpJnSFG82cLsD3wazbDCksKfic_o&libraries=places"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.js'
		integrity='sha512-RjvSEaeDqPCfUVQ9kna2/2OqHz/7F04IOl1/66LmQjB/lOeAzwq7LrbTzDbz5cJzlPNJ5qteNtHR56XaJSTNWw=='
		crossorigin='anonymous'></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
		crossorigin="anonymous"></script>
<script charset="utf-8" src="https://static.line-scdn.net/liff/edge/versions/2.1.13/sdk.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/lib\microsoft/signalr/dist/browser/signalr.js"></script>
<script>
	let app = new Vue({
		el: "#app",
		data: {
			selfLatLng: {
				lat: 25.04396,
				lng: 121.53440,
			},
			liff: {},
			map: {},
			isOrderPanelOpen: true,
			isAcceptOrder: false,
			firstDraw: true,
			directionsService: {},
			currentMaker: {},
			orders: [
				//    { orderDetails: [{ dishName: "薯條", unitPrice: 100, quantity: 5 }, { dishName: "薯條", unitPrice: 100, quantity: 5 }], customerName: "reds", orderDate: "2023/06/11", orderId: 1, title: "新北市三重區重新路三段182號", desc: "薯條x100", type: "現金", distance: 1.68 },
				//    { orderDetails: [{ dishName: "薯條", unitPrice: 100, quantity: 5 }, { dishName: "薯條", unitPrice: 100, quantity: 5 }], customerName: "reds", orderDate: "2023/06/11", orderId: 2, title: "台北市中正區林森南路1號", desc: "牛肉麵x100", type: "信用卡", distance: 5 },
				//    { orderDetails: [{ dishName: "薯條", unitPrice: 100, quantity: 5 }, { dishName: "薯條", unitPrice: 100, quantity: 5 }], customerName: "reds", orderDate: "2023/06/11", orderId: 3, title: "台北市中正區青島東路三段6之182號", desc: "薯條x100", type: "現金", distance: 7.8 },
			],
			order: {},
			acceptedOrder: [],
			hisorders:[],
			isHisPanel:false,
			signalr:{}
		},
		mounted: function () {
			let self = this;
			self.getOrdersData()
			self.getCurrentGeo();
			self.getAcceptedOrder()
			self.init();
			self.jsSetting();
			self.getHistoryOrder();
			self.signalr = new signalR.HubConnectionBuilder().withUrl(`/orderHub`).build();
			self.signalr.start().then(()=>{
				console.log('connected')
			}).catch((err)=>{
				console.error(err.toString())
			})
		},
		methods: {
			init: function () {
				let self = this;
				liff.init({
					liffId: '1661389631-7E56xaox'
				}).then(function () {
					self.initGoogleMap();
				});
			},
			initGoogleMap: function () {
				let self = this;
				self.map = new google.maps.Map(document.getElementById('map'), {
					center: { lat: self.selfLatLng.lat, lng: self.selfLatLng.lng },
					zoom: 14,
					disableDefaultUI: true,
					zoomControl: false,
					mapTypeControl: false
				});
				self.directionsService = new google.maps.DirectionsService();
				if (navigator.geolocation) {
					navigator.geolocation.watchPosition(
						function (position) {
							const currentLocation = {
								lat: position.coords.latitude,
								lng: position.coords.longitude
							};
							self.map.setCenter(currentLocation);
							self.drawCurrentMaker(currentLocation, !self.firstDraw);
							self.firstDraw = false;
						},
						function (error) {
							// console.error("取得位置失敗: ", error);
						}
					);
				} else {
					console.error("瀏覽器不支援地理位置服務");
				}
			},
			getCurrentGeo: function () {
				let self = this;
				navigator.geolocation.getCurrentPosition(function (position) {
					self.selfLatLng.lat = position.coords.latitude;
					self.selfLatLng.lng = position.coords.longitude;
				}, function (error) { console.log('取得座標失敗:', error); });
			},
			getHistoryOrder:function(){
				let self=this;
				axios.get(`/api/DeliverOrders/hisorder`).then(res => {
					self.hisorders=res.data;
				})
				setInterval(()=>{
					axios.get(`/api/DeliverOrders/hisorder`).then(res => {
						self.hisorders = res.data;
					})
				},600000)
			},
			getOrdersData: function () {
				let self = this;
				axios.get(`/api/DeliverOrders/prepared`).then(res => {
					self.orders = res.data
				})
				setInterval(()=>{
					axios.get(`/api/DeliverOrders/prepared`).then(res => {
						self.orders = res.data
					})
				},30000)
			},
			orderDetail: function (item) {
				let self = this;
				self.isOrderPanelOpen = false;
				console.log('orderDetail', this.isOrderPanelOpen);
				self.order = item;
			},
			jsSetting: function () {
				document.querySelector('.dropdown-menu').addEventListener('click', (e) => e.stopPropagation());
			},
			historyPanel:function(){
				let self=this;
				self.isHisPanel=true;
			},
			otherPanel:function(){
				let self=this;
				self.isHisPanel=false;
			},
			closeOrderPanel: function () {
				this.isOrderPanelOpen = true;
			},
			getAcceptedOrder:function(){
				let self = this;
				axios.get(`/api/DeliverOrders/deliver`).then(res=>{
					self.acceptedOrder=res.data;
					if(res.data!=""){
						self.isAcceptOrder = true;
						self.drawDirectionLine(self.selfLatLng, res.data[0].restaurantLocation,res.data[0].customerLocation);
						}
					})
			},
			acceptOrder: function (order) {
				let self = this;
				var request = {
					OrderId: order.orderId,
					Status: 'deliver'
				}
				//api
				axios.put(`/api/DeliverOrders/${order.orderId}`, request).then(res => {
					Swal.fire(`${res.data}`)
					self.getAcceptedOrder();
				})
				var idx=self.orders.findIndex(x=>x.orderId==order.orderId)
				self.signalr.invoke("Infomation", self.orders[idx].customerId, order.orderId, "外送員正在前往取餐")
				self.orders.splice(idx,1)
				//nav收折
				new bootstrap.Collapse(document.getElementById('navbarSupportedContent'))
				//切換按鈕
				//self.isAcceptOrder = true;
				//顯示路徑
				//self.drawDirectionLine(self.selfLatLng, order.restaurantLocation, order.customerLocation);
				
			},
			drawCurrentMaker: function (currentLocation, reset) {
				let self = this;
				if (reset) {
					self.currentMaker.setMap(null);
				}
				self.currentMaker = new google.maps.Marker({
					position: currentLocation,
					map: self.map,
					//icon: "/motorbike-motorbikes.gif",
					title: "目前位置"
				});
			},
			drawDirectionLine: function (start, waypoint, end) {
				let self = this;
				const request = {
					origin: { lat: start.lat, lng: start.lng },
					waypoints: [{ location: { lat: waypoint.latitude, lng: waypoint.longitude } }],
					destination: { lat: end.latitude, lng: end.longitude },
					travelMode: google.maps.TravelMode.DRIVING
				};

				self.directionsService.route(request, function (response, status) {
					if (status === google.maps.DirectionsStatus.OK) {
						const directionsRenderer = new google.maps.DirectionsRenderer();
						directionsRenderer.setDirections(response);
						directionsRenderer.setMap(self.map); // 將路線繪製到地圖上
					} else {
						console.error("Directions request failed. Status: ", status);
					}
				});
			},
			finishOrder: function (id) {
				let self = this;
				self.isAcceptOrder = false;
				self.isOrderPanelOpen = true;
				self.init();
				var request = {
					OrderId: id,
					Status: 'completed'
				}
				axios.put(`/api/DeliverOrders/${id}`, request).then(res => {
					Swal.fire(`已送達，完成訂單!`)
				})
				self.signalr.invoke("Infomation", self.acceptedOrder[0].customerId, id, "外送員已到達指定地址")
				self.acceptedOrder = [];
			},
			updateLocation: function (latitude, longitude) {
				liff.sendMessages([
					{
						type: 'text',
						text: 'Location updated: ' + latitude + ', ' + longitude
					}
				]).then(function () {
					console.log('Location message sent.');
				}).catch(function (error) {
					console.error('Failed to send location message:', error);
				});
			},
			btnValid:function(id)
			{
				let self=this;
				if (id != self.acceptedOrder[0].orderId) return true
				return false
			},
			logout:function(){
				Swal.fire({
					title: 'Are you sure?',
					text: "確定要登出嗎?",
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: '登出',
					cancelButtonText: '取消'
				}).then((result) => {
					if (result.isConfirmed) {
						axios.post(`/deliver/Home/Logout`)
						window.location.href = '/deliver/Home/Login';
					}
				})
			}
		}
	});
</script>